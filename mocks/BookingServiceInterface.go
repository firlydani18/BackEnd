// Code generated by mockery v2.39.1. DO NOT EDIT.

package mocks

import (
	booking "KosKita/features/booking"

	mock "github.com/stretchr/testify/mock"
)

// BookingServiceInterface is an autogenerated mock type for the BookingServiceInterface type
type BookingServiceInterface struct {
	mock.Mock
}

// CancelBooking provides a mock function with given fields: userId, bookingId, bookingCore
func (_m *BookingServiceInterface) CancelBooking(userId int, bookingId string, bookingCore booking.BookingCore) error {
	ret := _m.Called(userId, bookingId, bookingCore)

	if len(ret) == 0 {
		panic("no return value specified for CancelBooking")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int, string, booking.BookingCore) error); ok {
		r0 = rf(userId, bookingId, bookingCore)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetBookings provides a mock function with given fields: userId
func (_m *BookingServiceInterface) GetBookings(userId uint) ([]booking.BookingCore, error) {
	ret := _m.Called(userId)

	if len(ret) == 0 {
		panic("no return value specified for GetBookings")
	}

	var r0 []booking.BookingCore
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) ([]booking.BookingCore, error)); ok {
		return rf(userId)
	}
	if rf, ok := ret.Get(0).(func(uint) []booking.BookingCore); ok {
		r0 = rf(userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]booking.BookingCore)
		}
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PostBooking provides a mock function with given fields: userId, input
func (_m *BookingServiceInterface) PostBooking(userId uint, input booking.BookingCore) (*booking.BookingCore, error) {
	ret := _m.Called(userId, input)

	if len(ret) == 0 {
		panic("no return value specified for PostBooking")
	}

	var r0 *booking.BookingCore
	var r1 error
	if rf, ok := ret.Get(0).(func(uint, booking.BookingCore) (*booking.BookingCore, error)); ok {
		return rf(userId, input)
	}
	if rf, ok := ret.Get(0).(func(uint, booking.BookingCore) *booking.BookingCore); ok {
		r0 = rf(userId, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*booking.BookingCore)
		}
	}

	if rf, ok := ret.Get(1).(func(uint, booking.BookingCore) error); ok {
		r1 = rf(userId, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WebhoocksService provides a mock function with given fields: webhoocksReq
func (_m *BookingServiceInterface) WebhoocksService(webhoocksReq booking.BookingCore) error {
	ret := _m.Called(webhoocksReq)

	if len(ret) == 0 {
		panic("no return value specified for WebhoocksService")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(booking.BookingCore) error); ok {
		r0 = rf(webhoocksReq)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewBookingServiceInterface creates a new instance of BookingServiceInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBookingServiceInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *BookingServiceInterface {
	mock := &BookingServiceInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
