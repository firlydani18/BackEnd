// Code generated by mockery v2.39.1. DO NOT EDIT.

package mocks

import (
	kos "KosKita/features/kos"

	mock "github.com/stretchr/testify/mock"
)

// KosDataInterface is an autogenerated mock type for the KosDataInterface type
type KosDataInterface struct {
	mock.Mock
}

// CekRating provides a mock function with given fields: userId, kosId
func (_m *KosDataInterface) CekRating(userId int, kosId int) (*kos.RatingCore, error) {
	ret := _m.Called(userId, kosId)

	if len(ret) == 0 {
		panic("no return value specified for CekRating")
	}

	var r0 *kos.RatingCore
	var r1 error
	if rf, ok := ret.Get(0).(func(int, int) (*kos.RatingCore, error)); ok {
		return rf(userId, kosId)
	}
	if rf, ok := ret.Get(0).(func(int, int) *kos.RatingCore); ok {
		r0 = rf(userId, kosId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*kos.RatingCore)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(userId, kosId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: userIdLogin, kosId
func (_m *KosDataInterface) Delete(userIdLogin int, kosId int) error {
	ret := _m.Called(userIdLogin, kosId)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int, int) error); ok {
		r0 = rf(userIdLogin, kosId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetTotalKos provides a mock function with given fields:
func (_m *KosDataInterface) GetTotalKos() (int, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetTotalKos")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func() (int, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Insert provides a mock function with given fields: userIdLogin, input
func (_m *KosDataInterface) Insert(userIdLogin int, input kos.CoreInput) (uint, error) {
	ret := _m.Called(userIdLogin, input)

	if len(ret) == 0 {
		panic("no return value specified for Insert")
	}

	var r0 uint
	var r1 error
	if rf, ok := ret.Get(0).(func(int, kos.CoreInput) (uint, error)); ok {
		return rf(userIdLogin, input)
	}
	if rf, ok := ret.Get(0).(func(int, kos.CoreInput) uint); ok {
		r0 = rf(userIdLogin, input)
	} else {
		r0 = ret.Get(0).(uint)
	}

	if rf, ok := ret.Get(1).(func(int, kos.CoreInput) error); ok {
		r1 = rf(userIdLogin, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertImage provides a mock function with given fields: userIdLogin, kosId, input
func (_m *KosDataInterface) InsertImage(userIdLogin int, kosId int, input kos.CoreFoto) error {
	ret := _m.Called(userIdLogin, kosId, input)

	if len(ret) == 0 {
		panic("no return value specified for InsertImage")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int, int, kos.CoreFoto) error); ok {
		r0 = rf(userIdLogin, kosId, input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InsertRating provides a mock function with given fields: userIdLogin, kosId, score
func (_m *KosDataInterface) InsertRating(userIdLogin int, kosId int, score kos.RatingCore) error {
	ret := _m.Called(userIdLogin, kosId, score)

	if len(ret) == 0 {
		panic("no return value specified for InsertRating")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int, int, kos.RatingCore) error); ok {
		r0 = rf(userIdLogin, kosId, score)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SearchKos provides a mock function with given fields: query, category, minPrice, maxPrice
func (_m *KosDataInterface) SearchKos(query string, category string, minPrice int, maxPrice int) ([]kos.Core, error) {
	ret := _m.Called(query, category, minPrice, maxPrice)

	if len(ret) == 0 {
		panic("no return value specified for SearchKos")
	}

	var r0 []kos.Core
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, int, int) ([]kos.Core, error)); ok {
		return rf(query, category, minPrice, maxPrice)
	}
	if rf, ok := ret.Get(0).(func(string, string, int, int) []kos.Core); ok {
		r0 = rf(query, category, minPrice, maxPrice)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]kos.Core)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, int, int) error); ok {
		r1 = rf(query, category, minPrice, maxPrice)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectById provides a mock function with given fields: kosId
func (_m *KosDataInterface) SelectById(kosId int) (*kos.Core, error) {
	ret := _m.Called(kosId)

	if len(ret) == 0 {
		panic("no return value specified for SelectById")
	}

	var r0 *kos.Core
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (*kos.Core, error)); ok {
		return rf(kosId)
	}
	if rf, ok := ret.Get(0).(func(int) *kos.Core); ok {
		r0 = rf(kosId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*kos.Core)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(kosId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectByRating provides a mock function with given fields:
func (_m *KosDataInterface) SelectByRating() ([]kos.Core, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for SelectByRating")
	}

	var r0 []kos.Core
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]kos.Core, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []kos.Core); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]kos.Core)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectByUserId provides a mock function with given fields: userIdLogin
func (_m *KosDataInterface) SelectByUserId(userIdLogin int) ([]kos.Core, error) {
	ret := _m.Called(userIdLogin)

	if len(ret) == 0 {
		panic("no return value specified for SelectByUserId")
	}

	var r0 []kos.Core
	var r1 error
	if rf, ok := ret.Get(0).(func(int) ([]kos.Core, error)); ok {
		return rf(userIdLogin)
	}
	if rf, ok := ret.Get(0).(func(int) []kos.Core); ok {
		r0 = rf(userIdLogin)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]kos.Core)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(userIdLogin)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: userIdLogin, input
func (_m *KosDataInterface) Update(userIdLogin int, input kos.CoreInput) error {
	ret := _m.Called(userIdLogin, input)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int, kos.CoreInput) error); ok {
		r0 = rf(userIdLogin, input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewKosDataInterface creates a new instance of KosDataInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewKosDataInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *KosDataInterface {
	mock := &KosDataInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
